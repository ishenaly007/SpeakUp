package com.abit8.speakupengbot.controller;

import com.abit8.speakupengbot.db.entity.ChatHistory;
import com.abit8.speakupengbot.db.entity.LanguageLevel;
import com.abit8.speakupengbot.db.entity.User;
import com.abit8.speakupengbot.db.service.ChatHistoryService;
import com.abit8.speakupengbot.db.service.UserService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/chat")
public class ChatController {

    private final ChatHistoryService chatHistoryService;
    private final UserService userService;
    private final WebClient webClient;

    public ChatController(ChatHistoryService chatHistoryService, UserService userService, WebClient.Builder webClient) {
        this.chatHistoryService = chatHistoryService;
        this.userService = userService;
        this.webClient = webClient.baseUrl("https://openrouter.ai/api/v1").build();
    }

    @Value("${openrouter.api.key}")
    private String openRouterApiKey;

    private static final int MAX_TOKENS = 1000;

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    @PostMapping
    public ResponseEntity<Map<String, Object>> sendMessage(@RequestBody Map<String, String> request) {
        Long userId = Long.parseLong(request.get("userId"));
        String userMessage = request.get("message");
        String aiModel = "microsoft/mai-ds-r1:free";

        chatHistoryService.saveChatMessage(userId, userMessage, true, aiModel);

        // –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        LanguageLevel userLevel = userService.loginTelegramUser(userId)
                .map(User::getLevel)
                .orElse(LanguageLevel.A1);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        List<ChatHistory> history = chatHistoryService.getRecentChatHistory(userId, 15);
        StringBuilder historyBlock = new StringBuilder();
        int totalChars = 0;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–ª–∏ –ø–µ—Ä–≤—ã–º–∏
        for (int i = history.size() - 1; i >= 0; i--) {
            ChatHistory entry = history.get(i);
            String time = entry.getCreatedAt().format(formatter);
            String prefix = entry.isUserMessage() ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–ë–æ—Ç";
            String line = String.format("[%s, %s]: %s", prefix, time, entry.getMessage());
            historyBlock.append(line).append("\n");
            totalChars += entry.getMessage().length();
            if (totalChars > MAX_TOKENS * 4) break;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        String nowTime = LocalDateTime.now().format(formatter);
        String systemPrompt = String.format(
                "–¢—ã ‚Äî —Å–∏—Å—Ç–µ–º–∞, —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –±–æ—Ç–æ–º, –º–æ–∏–º –¥—Ä—É–≥–æ–º –∏ —É—á–∏—Ç–µ–ª–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –¥–ª—è —É—Ä–æ–≤–Ω—è %s. –°–µ–π—á–∞—Å %s. " +
                "–ì–æ–≤–æ—Ä–∏ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞, –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫: –ø—Ä–æ—Å—Ç–æ, —Å –ø–æ–∑–∏—Ç–∏–≤–æ–º –∏ –ª–µ–≥–∫–∏–º —é–º–æ—Ä–æ–º. " +
                "–û–±—ä—è—Å–Ω—è–π –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ –º—ã —Ç—É—Å–∏–º, –º–∞–∫—Å–∏–º—É–º 100 —Å–ª–æ–≤. " +
                "–í –¥–∏–∞–ª–æ–≥–∞—Ö ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, 20-30 —Å–ª–æ–≤, —Å –Ω–∞–º–µ–∫–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. –ï—Å–ª–∏ —è –ø—Ä–æ '–ø–æ–∫–∞' –∏–ª–∏ –ø–æ–≥–æ–¥—É, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∫–∏–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Ñ–∏—à–∫—É, –±–µ–∑ —É—Ä–æ–∫–æ–≤. " +
                "–ú–æ—Ç–∏–≤–∏—Ä—É–π —É—á–∏—Ç—å—Å—è! –§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –≤ MarkdownV2, —ç–∫—Ä–∞–Ω–∏—Ä—É–π —Å–∏–º–≤–æ–ª—ã \\* \\_ \\[ \\] \\( \\) \\~ \\` \\> \\# \\+ \\- \\= \\| \\{ \\} \\. \\!. " +
                "–ü—Ä–∏–º–µ—Ä: \\*bold\\* –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, \\_italic\\_ –¥–ª—è –∫—É—Ä—Å–∏–≤–∞, \\[text\\]\\(url\\) –¥–ª—è —Å—Å—ã–ª–æ–∫.\n\n" +
                "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n%s---\n\n" +
                "–ú–æ–π –≤–æ–ø—Ä–æ—Å: %s\n\n" +
                "–ó–Ω–∞–π –∏—Å—Ç–æ—Ä–∏—é, –Ω–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –º–æ–π –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é —Ç–µ–º—É ‚Äî –ø–æ–¥—Ö–≤–∞—Ç–∏, –∏–Ω–∞—á–µ –≤–µ–¥–∏ –∑–∞ –º–Ω–æ–π. –ë—É–¥—å –±—Ä–æ –∏ —É—á–∏ —Å –∫–∞–π—Ñ–æ–º!",
                userLevel,
                nowTime,
                historyBlock.length() > 0 ? historyBlock.toString() : "–ü–æ–∫–∞ –Ω–µ —Ç—Ä—ã–Ω–¥–µ–ª —Å —Ç–æ–±–æ–π, –Ω–∞—á–Ω–µ–º —Å –Ω—É–ª—è!\n",
                userMessage
        );

        List<Map<String, String>> messages = new ArrayList<>();
        messages.add(Map.of("role", "system", "content", systemPrompt));

        Map<String, Object> body = new HashMap<>();
        body.put("model", aiModel);
        body.put("messages", messages);

        // –í—ã–∑–æ–≤ OpenRouter API
        String aiResponse = "–≠–π, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –µ—â–µ —Ä–∞–∑–æ–∫\\? üòé";
        int maxRetries = 2;
        int retryCount = 0;
        boolean success = false;

        while (retryCount <= maxRetries && !success) {
            try {
                Mono<Map> responseMono = webClient.post()
                        .uri("/chat/completions")
                        .header("Authorization", "Bearer " + openRouterApiKey)
                        .contentType(MediaType.APPLICATION_JSON)
                        .bodyValue(body)
                        .retrieve()
                        .bodyToMono(Map.class)
                        .timeout(Duration.ofSeconds(70));

                Map responseBody = responseMono.block();
                if (responseBody != null && responseBody.containsKey("choices")) {
                    List<Map> choices = (List<Map>) responseBody.get("choices");
                    if (!choices.isEmpty()) {
                        Map choice = choices.get(0);
                        Map message = (Map) choice.get("message");
                        aiResponse = (String) message.get("content");
                        success = true;
                    }
                }
            } catch (Exception e) {
                retryCount++;
                if (retryCount > maxRetries) {
                    aiResponse = retryCount == 1 ? "API –ø–æ–¥–≤–∏—Å, –¥–∞–π –º–∏–Ω—É—Ç–∫—É\\!" : "–ù–µ –º–æ–≥—É –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ –ò–ò, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ\\!";
                } else {
                    try {
                        Thread.sleep(1000 * retryCount);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                    }
                }
            }
        }

        chatHistoryService.saveChatMessage(userId, aiResponse, false, aiModel);

        Map<String, Object> response = new HashMap<>();
        response.put("message", aiResponse);
        return ResponseEntity.ok(response);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    @GetMapping("/{userId}/history")
    public ResponseEntity<List<Map<String, Object>>> getChatHistory(@PathVariable Long userId) {
        List<ChatHistory> history = chatHistoryService.getRecentChatHistory(userId, 15);
        // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–ª–∏ –ø–µ—Ä–≤—ã–º–∏
        List<Map<String, Object>> response = new ArrayList<>();
        for (int i = history.size() - 1; i >= 0; i--) {
            ChatHistory entry = history.get(i);
            Map<String, Object> message = new HashMap<>();
            message.put("isUserMessage", entry.isUserMessage());
            message.put("message", entry.getMessage());
            message.put("createdAt", entry.getCreatedAt().toString());
            response.add(message);
        }
        return ResponseEntity.ok(response);
    }
}