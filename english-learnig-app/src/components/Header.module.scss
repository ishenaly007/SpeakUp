// SCSS variables from global.scss (like $header-height) are not directly available
// unless this file is processed by SCSS with global.scss in its context.
// However, CSS custom properties are globally available.
// For $header-height, it was defined as $header-height-val in global.scss.
// We'll assume it's available or use a hardcoded fallback if not.
// For colors, we MUST use CSS custom properties.

.header {
  background-color: var(--surface-color); // Use CSS variable for header background
  padding: 1rem 1.5rem;
  border-bottom: 1px solid var(--border-color); // Use CSS variable for border
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 1000;
  height: 70px; // Fallback for $header-height, or ensure $header-height-val is available
  display: flex;
  align-items: center;
  justify-content: space-between;
  transition: background-color 0.3s ease, border-color 0.3s ease; // Smooth theme transition

  .siteTitle {
    text-decoration: none;
    color: var(--primary-color); // Use CSS variable
    font-size: 1.5rem;
    font-weight: 700;
    transition: color 0.3s ease;

    &:hover {
      color: var(--link-hover-color); // Use CSS variable
    }
  }

  .nav {
    display: flex;
    gap: 1.5rem;
    align-items: center;
  }

  .navLink {
    text-decoration: none;
    color: var(--text-color); // Use CSS variable
    font-weight: 500;
    padding: 0.5rem 0;
    position: relative;
    transition: color 0.3s ease;


    &:hover, &.activeLink {
      color: var(--primary-color); // Use CSS variable
    }

    &::after {
      content: '';
      position: absolute;
      width: 0;
      height: 2px;
      bottom: -2px;
      left: 0;
      background-color: var(--primary-color); // Use CSS variable
      transition: width 0.3s ease, background-color 0.3s ease;
    }

    &:hover::after,
    &.activeLink::after {
      width: 100%;
    }
  }

  // Standard button styling, assuming .logoutButton class is applied
  // to the <button> in Header.jsx as done in a previous step.
  .logoutButton {
    padding: 0.6rem 1.2rem;
    background-color: var(--button-bg-color); // Use CSS variable
    color: var(--button-text-color); // Use CSS variable
    border: 1px solid transparent; // Add border for consistency, make it transparent
    border-radius: var(--border-radius, 5px); // Use global var or fallback
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;

    &:hover {
      background-color: var(--link-hover-color); // Or a specific button hover bg var
      border-color: var(--primary-color); // Show border on hover
    }
  }
}

// Responsive adjustments for Header
@media (max-width: 768px) {
  .header {
    height: auto;
    padding: 0.75rem 1rem;
    flex-direction: column;
    align-items: flex-start;

    .siteTitle {
      margin-bottom: 0.5rem;
    }

    .nav {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
      width: 100%;
    }

    .navLink {
      padding: 0.5rem;
      width: 100%;
      border-bottom: 1px solid var(--border-color); // Use CSS variable

      &::after {
        display: none;
      }

      &:last-child {
        border-bottom: none;
      }
    }

    .logoutButton { // Ensure consistent styling for logout button in responsive mode
      margin-top: 0.5rem;
      width: 100%;
    }
  }
}

// Fallbacks for SCSS variables are no longer needed here if using CSS custom properties.
// $primary-color, $text-color, $header-height were used.
// $header-height is the only one not easily replaceable by a CSS var if used for layout calculations in JS,
// but for CSS `height` property, a static value or another CSS var is fine.
// The global.scss defined $header-height-val, so if this SCSS file is processed in an environment
// where that's available, it would be `height: $header-height-val;`. Otherwise, fallback to static 70px.